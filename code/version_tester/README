-- Building the version tester --

Make for Windows using the following command:
make -f makefile-windows

Make for Linux using the following command:
make -f makefile-linux


-- Installing the version tester on Hydra --
So, we will use the version tester in order to consistently test our deops.

1. Go to your user root directory:  cd ~
2. Make a bin directory:  mkdir bin
3. Open your .bash_profile file
     * Using emacs:  emacs .bash_profile
     * Using vi:  vi .bash_profile
4. Add the following at the end of the .bash_profile
     * This will make it so that executables that are added to 
       your bin directory will be executable from any directory
PATH=$PATH:$HOME/bin
export PATH
5. Save .bash_profile and exit the editor
6. Take the version_tester code and put it into its own directory.  Call this directory whatever you want
7. Compile the version tester:  make -f makefile-linux
8. Copy the executable to your new bin directory:  cp version_tester ~/bin
9. Now you can run the version tester from anywhere


-- Examples of running version tester on Hydra from the mod_ten_counter directory --

> bpsh 10 version_tester mod_ten_counter.test.hydra-node12.config

Running Optimized for 10 for 200 iterations
Done running Optimized for 10 with an average of 1118 cycles

Running De-optimized #1 for 10 for 200 iterations
Done running De-optimized #1 for 10 with an average of 882 cycles

Running Optimized for 100 for 200 iterations
Done running Optimized for 100 with an average of 2740 cycles

Running De-optimized #1 for 100 for 200 iterations
Done running De-optimized #1 for 100 with an average of 2961 cycles

Running Optimized for 1000 for 200 iterations
Done running Optimized for 1000 with an average of 19796 cycles

Running De-optimized #1 for 1000 for 200 iterations
Done running De-optimized #1 for 1000 with an average of 21566 cycles

Running Optimized for 10000 for 200 iterations
Done running Optimized for 10000 with an average of 192777 cycles

Running De-optimized #1 for 10000 for 200 iterations
Done running De-optimized #1 for 10000 with an average of 209026 cycles

Running Optimized for 100000 for 200 iterations
Done running Optimized for 100000 with an average of 1937314 cycles

Running De-optimized #1 for 100000 for 200 iterations
Done running De-optimized #1 for 100000 with an average of 2099113 cycles

Running Optimized for 1000000 for 200 iterations
Done running Optimized for 1000000 with an average of 19544767 cycles

Running De-optimized #1 for 1000000 for 200 iterations
Done running De-optimized #1 for 1000000 with an average of 21099644 cycles

Running Optimized for 10000000 for 200 iterations
Done running Optimized for 10000000 with an average of 211357345 cycles

Running De-optimized #1 for 10000000 for 200 iterations
Done running De-optimized #1 for 10000000 with an average of 228395313 cycles


-- Examples of running version tester on Windows from the mod_ten_counter directory --

> start /realtime /affinity 4 /b ..\..\version_tester\version_tester mod_ten_counter.test.dereksmachine.config

Running Optimized for 10 for 200 iterations
Done running Optimized for 10 with an average of 1155 cycles

Running De-optimized #1 for 10 for 200 iterations
Done running De-optimized #1 for 10 with an average of 1149 cycles

Running Optimized for 100 for 200 iterations
Done running Optimized for 100 with an average of 4861 cycles

Running De-optimized #1 for 100 for 200 iterations
Done running De-optimized #1 for 100 with an average of 4758 cycles

Running Optimized for 1000 for 200 iterations
Done running Optimized for 1000 with an average of 34850 cycles

Running De-optimized #1 for 1000 for 200 iterations
Done running De-optimized #1 for 1000 with an average of 43767 cycles

Running Optimized for 10000 for 200 iterations
Done running Optimized for 10000 with an average of 351330 cycles

Running De-optimized #1 for 10000 for 200 iterations
Done running De-optimized #1 for 10000 with an average of 422628 cycles

Running Optimized for 100000 for 200 iterations
Done running Optimized for 100000 with an average of 3525868 cycles

Running De-optimized #1 for 100000 for 200 iterations
Done running De-optimized #1 for 100000 with an average of 4166959 cycles

Running Optimized for 1000000 for 200 iterations
Done running Optimized for 1000000 with an average of 38483888 cycles

Running De-optimized #1 for 1000000 for 200 iterations
Done running De-optimized #1 for 1000000 with an average of 43379088 cycles

Running Optimized for 10000000 for 200 iterations
Done running Optimized for 10000000 with an average of 469879707 cycles

Running De-optimized #1 for 10000000 for 200 iterations
Done running De-optimized #1 for 10000000 with an average of 515266670 cycles

